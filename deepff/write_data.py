#! /usr/env/bin python

import os
import csv
import linecache
import multiprocessing
import numpy as np
from collections import OrderedDict
from CP2K_kit.tools import call
from CP2K_kit.tools import numeric
from CP2K_kit.tools import log_info
from CP2K_kit.tools import data_op
from CP2K_kit.tools import traj_info
from CP2K_kit.tools import file_tools
from CP2K_kit.deepff import load_data
from CP2K_kit.deepff import process

def write_restart_inp(inp_file_name, restart_iter, restart_stage, data_num, work_dir):

  '''
  check_inp: write restart input file for deepff

  Args:
    inp_file_name: string
      inp_file_name is the name of cp2k_kit deepff file.
    restart_iter: int
      restart_iter is the iteration number of restart.
    restart_stage: int
      restart_stage is the stage of restart.
    data_num: 1-d int list
      tot_data_num is the data number for each system.
    work_dir: string
      work_dir is working directory of CP2K_kit.
  Returns:
    none
  '''

  i=0
  while True:
    inp_tmp_file_name = ''.join((work_dir, '/input_tmp', str(i), '.inp'))
    if ( os.path.exists(inp_tmp_file_name) ):
      i=i+1
    else:
      break

  cmd = "cp %s %s" %(inp_file_name, inp_tmp_file_name)
  call.call_simple_shell(work_dir, cmd)

  restart_inp_file_name = ''.join((work_dir, '/CP2K_KIT.restart'))
  whole_line_num = len(open(inp_tmp_file_name).readlines())

  line_1_num = file_tools.grep_line_num("'&active_learn'", inp_tmp_file_name, work_dir)[0]
  line_2_num = file_tools.grep_line_num("'choose_new_data_num_limit'", inp_tmp_file_name, work_dir)
  line_3_num = file_tools.grep_line_num("'judge_freq'", inp_tmp_file_name, work_dir)
  line_4_num = file_tools.grep_line_num("'force_conv'", inp_tmp_file_name, work_dir)
  line_5_num = file_tools.grep_line_num("'energy_conv'", inp_tmp_file_name, work_dir)
  line_6_num = file_tools.grep_line_num("'max_iter'", inp_tmp_file_name, work_dir)
  line_7_num = file_tools.grep_line_num("'&end active_learn'", inp_tmp_file_name, work_dir)[0]
  data_num_str = data_op.comb_list_2_str(data_num, ' ')

  restart_inp_file = open(restart_inp_file_name, 'w')
  for i in range(line_1_num):
    line_i = linecache.getline(inp_tmp_file_name, i+1)
    restart_inp_file.write(line_i)

  for i in [line_2_num, line_3_num, line_4_num, line_5_num, line_6_num]:
    if ( i != 0 ):
      line_i = linecache.getline(inp_tmp_file_name, i[0])
      restart_inp_file.write(line_i)

  restart_inp_file.write('    restart_iter %d\n' %(restart_iter))
  restart_inp_file.write('    data_num %s\n' %(data_num_str))
  restart_inp_file.write('    restart_stage %d\n' %(restart_stage))

  for i in range(line_7_num, whole_line_num+1, 1):
    line_i = linecache.getline(inp_tmp_file_name, i)
    restart_inp_file.write(line_i)

  linecache.clearcache()
  restart_inp_file.close()

  cmd = "rm %s" %(inp_tmp_file_name)
  call.call_simple_shell(work_dir, cmd)

def write_active_data(work_dir, conv_iter, tot_atoms_type_dic):

  '''
  write_active_data: write the data generated by active learning.

  Args:
    work_dir: string
      work_dir is the working directory.
    conv_iter: int
      conv_iter is the number of iteration.
    tot_atoms_type_dic: dictionary
      tot_atoms_type_dic is the atoms type dictionary.
  Returns :
    none
  '''

  active_data_dir = ''.join((work_dir, '/active_data'))

  if ( not os.path.exists(active_data_dir) ):
    cmd = "mkdir %s" %('active_data')
    call.call_simple_shell(work_dir, cmd)
  cmd = "ls | grep %s" % ('sys_')
  sys_num = len(call.call_returns_shell(''.join((work_dir, '/iter_0/02.lammps_calc')), cmd))

  for i in range(sys_num):

    energy_cp2k = []
    frc_cp2k = []
    frc_x_cp2k = []
    frc_y_cp2k = []
    frc_z_cp2k = []

    sys_dir = ''.join((active_data_dir, '/sys_', str(i)))
    if ( not os.path.exists(sys_dir) ):
      cmd = "mkdir %s" %(''.join(('sys_', str(i))))
      call.call_simple_shell(active_data_dir, cmd)
    energy_file_name = ''.join((sys_dir, '/energy.raw'))
    coord_file_name = ''.join((sys_dir, '/coord.raw'))
    frc_file_name = ''.join((sys_dir, '/force.raw'))
    cell_file_name = ''.join((sys_dir, '/box.raw'))
    energy_file = open(energy_file_name, 'w')
    coord_file = open(coord_file_name, 'w')
    frc_file = open(frc_file_name, 'w')
    cell_file = open(cell_file_name, 'w')

    traj_coord_file_name = ''.join((sys_dir, '/active-pos-1.xyz'))
    traj_frc_file_name = ''.join((sys_dir, '/active-frc-1.xyz'))
    traj_cell_file_name = ''.join((sys_dir, '/active-1.cell'))
    traj_coord_file = open(traj_coord_file_name, 'w')
    traj_frc_file = open(traj_frc_file_name, 'w')
    traj_cell_file = open(traj_cell_file_name, 'w')

    for j in range(conv_iter):
      iter_dir = ''.join((work_dir, '/iter_', str(j)))
      cp2k_sys_dir = ''.join((iter_dir, '/03.cp2k_calc/sys_', str(i)))
      task_num, task_dir = process.get_task_num(cp2k_sys_dir, True)
      for k in range(task_num):
        cp2k_sys_task_dir = ''.join((cp2k_sys_dir, '/', task_dir[k]))
        data_dir = ''.join((cp2k_sys_task_dir, '/data'))
        if ( j == 0 ):
          cmd = "cp type.raw %s" %(sys_dir)
          call.call_simple_shell(data_dir, cmd)
        energy_array, coord_array, frc_array, cell_array, virial_array = load_data.read_raw_data(data_dir)
        frames_num = len(energy_array)
        atoms_num = int(len(coord_array[0])/3)
        for l in range(frames_num):
          energy_file.write('%f\n' %(energy_array[l]))
          energy_cp2k.append(energy_array[l])
          frame_str = ''
          for m in range(len(coord_array[l])):
            if ( m == 0 ):
              frame_str = ''.join((frame_str, str(coord_array[l][m])))
            else:
              frame_str = ' '.join((frame_str, str(coord_array[l][m])))
          coord_file.write('%s\n' %(frame_str))

          frc_cp2k_l = []
          frc_x_cp2k_l = []
          frc_y_cp2k_l = []
          frc_z_cp2k_l = []

          frame_str = ''
          for m in range(len(frc_array[l])):
            if ( m == 0 ):
              frame_str = ''.join((frame_str, str(frc_array[l][m])))
            else:
              frame_str = ' '.join((frame_str, str(frc_array[l][m])))
            frc_cp2k_l.append(frc_array[l][m])
            if ( m%3 == 0 ):
              frc_x_cp2k_l.append(frc_array[l][m])
            elif ( m%3 == 1 ):
              frc_y_cp2k_l.append(frc_array[l][m])
            elif ( m%3 == 2 ):
              frc_z_cp2k_l.append(frc_array[l][m])
          frc_cp2k.append(frc_cp2k_l)
          frc_x_cp2k.append(frc_x_cp2k_l)
          frc_y_cp2k.append(frc_y_cp2k_l)
          frc_z_cp2k.append(frc_z_cp2k_l)
          frc_file.write('%s\n' %(frame_str))

          frame_str = ''
          for m in range(len(cell_array[l])):
            if ( m == 0 ):
              frame_str = ''.join((frame_str, str(cell_array[l][m])))
            else:
              frame_str = ' '.join((frame_str, str(cell_array[l][m])))
          cell_file.write('%s\n' %(frame_str))
    energy_file.close()
    coord_file.close()
    frc_file.close()
    cell_file.close()

    energy_array, coord_array, frc_array, cell_array, virial_array = load_data.read_raw_data(sys_dir)
    train_data_num, test_data_num = load_data.raw_data_to_set(1, False, sys_dir, energy_array, coord_array, frc_array, cell_array, virial_array)

    atoms = []
    type_raw = open(''.join((sys_dir, '/type.raw')), 'rb').read().split()
    for j in range(len(type_raw)):
      atoms.append(data_op.get_dic_keys(tot_atoms_type_dic, int(type_raw[j].decode())))

    traj_cell_file.write('#   Step   Time [fs]       Ax [Angstrom]       Ay [Angstrom]       Az [Angstrom]       Bx [Angstrom]       By [Angstrom]       Bz [Angstrom]       Cx [Angstrom]       Cy [Angstrom]       Cz [Angstrom]      Volume [Angstrom^3]\n')
    frames_num_tot = len(energy_array)
    for j in range(frames_num_tot):
      frc_array_j = frc_array[j].reshape(atoms_num, 3)
      coord_array_j = coord_array[j].reshape(atoms_num, 3)
      cell_array_j = cell_array[j].reshape(3,3)
      vol = np.linalg.det(cell_array_j)

      traj_coord_file.write('%8d\n' %(atoms_num))
      traj_coord_file.write('%s%9d%s%13.3f%s%21.10f\n' %(' i =', j, ', time =', j*0.5, ', E =', energy_array[j]))
      for k in range(atoms_num):
        traj_coord_file.write('%3s%21.10f%20.10f%20.10f\n' %(atoms[k], coord_array_j[k][0], coord_array_j[k][1], coord_array_j[k][2]))

      traj_frc_file.write('%8d\n' %(atoms_num))
      traj_frc_file.write('%s%9d%s%13.3f%s%21.10f\n' %(' i =', j, ', time =', j*0.5, ', E =', energy_array[j]))
      for k in range(atoms_num):
        traj_frc_file.write('%3s%21.10f%20.10f%20.10f\n' %(atoms[k], frc_array_j[k][0], frc_array_j[k][1], frc_array_j[k][2]))

      traj_cell_file.write('%8d%12.3f%20.10f%20.10f%20.10f%20.10f%20.10f%20.10f%20.10f%20.10f%20.10f%25.10f\n' \
                           %(j, j*0.5, cell_array_j[0][0], cell_array_j[0][1], cell_array_j[0][2], \
                             cell_array_j[1][0], cell_array_j[1][1], cell_array_j[1][2], \
                             cell_array_j[2][0], cell_array_j[2][1], cell_array_j[2][2], vol))

    traj_coord_file.close()
    traj_frc_file.close()
    traj_cell_file.close()

  str_print = 'Active data is written in %s' %(active_data_dir)
  print (data_op.str_wrap(str_print, 80), flush=True)

def write_file(energy_cp2k, energy_lmp, frc_cp2k, frc_lmp, work_dir):

  '''
  write_file: write the energy and force data in a file

  Args:
    energy_cp2k: 1-d float list
      energy_cp2k contains cp2k energy values along with trajectory.
    energy_lmp: 1-d float list
      energy_lmp contains lammps energy values along with trajectory.
    frc_cp2k: 2-d float list, dim = Num of frames * (3*(Num of atoms))
      frc_cp2k contains cp2k force values along with trajectory.
    frc_lmp: 2-d float list, dim = Num of frames * (3*(Num of atoms))
      frc_lmp contains lammps force values along with trajectory.
    work_dir: string
      working_dir is the working directory.
  Returns:
    none
  '''

  energy_file_name = ''.join((work_dir, '/energy.csv'))
  frc_file_name = ''.join((work_dir, '/force.csv'))
  frc_x_file_name = ''.join((work_dir, '/force_x.csv'))
  frc_y_file_name = ''.join((work_dir, '/force_y.csv'))
  frc_z_file_name = ''.join((work_dir, '/force_z.csv'))

  frames_num = len(energy_cp2k)
  atoms_num = len(frc_cp2k[0])

  rmsd_energy = []
  rmsd_frc_x = []
  rmsd_frc_y = []
  rmsd_frc_z = []
  for i in range(frames_num):
    rmsd_energy.append(abs(energy_cp2k[i]-energy_lmp[i]))
    rmsd_frc_x.append(numeric.get_euclid_dist([x[0] for x in frc_cp2k[i]], [x[0] for x in frc_lmp[i]]))
    rmsd_frc_y.append(numeric.get_euclid_dist([x[1] for x in frc_cp2k[i]], [x[1] for x in frc_lmp[i]]))
    rmsd_frc_z.append(numeric.get_euclid_dist([x[2] for x in frc_cp2k[i]], [x[2] for x in frc_lmp[i]]))

  rmsd_energy_avg = sum(rmsd_energy)/len(rmsd_energy)
  rmsd_frc_x_avg = sum(rmsd_frc_x)/len(rmsd_frc_x)
  rmsd_frc_y_avg = sum(rmsd_frc_y)/len(rmsd_frc_y)
  rmsd_frc_z_avg = sum(rmsd_frc_z)/len(rmsd_frc_z)
  rmsd_frc_avg = (rmsd_frc_x_avg+rmsd_frc_y_avg+rmsd_frc_z_avg)/3.0
  with open(energy_file_name, 'w') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(['cp2k_energy (eV/atom)', 'lmp_energy (eV/atom)'])
    for i in range(frames_num):
      writer.writerow([energy_cp2k[i], energy_lmp[i]])

  str_print = 'Success: cp2k energy vs lammps energy is written in %s. Averaged RMSD between cp2k and lammps is %f eV/atom.' \
               %(energy_file_name, rmsd_energy_avg)
  str_print = data_op.str_wrap(str_print, 80, '  ')
  print (str_print, flush=True)

  with open(frc_file_name, 'w') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(['cp2k_force (eV/Angstrom)', 'lmp_force (eV/Angstrom)'])
    for i in range(frames_num):
      for j in range(atoms_num):
        writer.writerow([frc_cp2k[i][j][0], frc_lmp[i][j][0]])
        writer.writerow([frc_cp2k[i][j][1], frc_lmp[i][j][1]])
        writer.writerow([frc_cp2k[i][j][2], frc_lmp[i][j][2]])

  str_print = 'Success: cp2k force vs lammps force is written in %s. Averaged RMSD between cp2k and lammps is %f eV/A' \
               %(energy_file_name, rmsd_frc_avg)
  str_print = data_op.str_wrap(str_print, 80, '  ')
  print (str_print, flush=True)

  with open(frc_x_file_name, 'w') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(['cp2k_force (eV/Angstrom)', 'lmp_force (eV/Angstrom)'])
    for i in range(frames_num):
      for j in range(atoms_num):
        writer.writerow([frc_cp2k[i][j][0], frc_lmp[i][j][0]])

  str_print = 'Success: cp2k force of x part vs lammps force of x part is written in %s' %(energy_file_name)
  str_print = data_op.str_wrap(str_print, 80, '  ')
  print (str_print, flush=True)

  with open(frc_y_file_name, 'w') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(['cp2k_force (eV/Angstrom)', 'lmp_force (eV/Angstrom)'])
    for i in range(frames_num):
      for j in range(atoms_num):
        writer.writerow([frc_cp2k[i][j][1], frc_lmp[i][j][1]])

  str_print = 'Success: cp2k force of y part vs lammps force of y part is written in %s' %(energy_file_name)
  str_print = data_op.str_wrap(str_print, 80, '  ')
  print (str_print, flush=True)

  with open(frc_z_file_name, 'w') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(['cp2k_force (eV/Angstrom)', 'lmp_force (eV/Angstrom)'])
    for i in range(frames_num):
      for j in range(atoms_num):
        writer.writerow([frc_cp2k[i][j][2], frc_lmp[i][j][2]])

  str_print = 'Success: cp2k force of z part vs lammps force of z part is written in %s' %(energy_file_name)
  str_print = data_op.str_wrap(str_print, 80, '  ')
  print (str_print, flush=True)
